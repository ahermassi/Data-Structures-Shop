* A Heap is a special Tree-based data structure in which the tree is a complete binary tree. Heaps can be of two types:
1) Max-Heap: In a Max-Heap the key present at the root node must be greatest among the keys present at all of its
children. The same property must be recursively true for all sub-trees in that Binary Tree.
2) Min-Heap: In a Min-Heap the key present at the root node must be minimum among the keys present at all of its
children. The same property must be recursively true for all sub-trees in that Binary Tree.

* A Binary Heap is a Binary Tree with following properties:
1) Itâ€™s a complete tree (All levels are completely filled except possibly the last level and the last level has all
keys as left as possible). This property of Binary Heap makes them suitable to be stored in an array.

2) A Binary Heap is either Min Heap or Max Heap.

Examples of Min Heap:

            10                      10
         /      \               /       \
       20        100          15         30
      /                      /  \        /  \
    30                     40    50    100   40

* A binary heap is typically represented as an array.

The root element will be at Arr[0].
Below table shows indexes of other nodes for the ith node, i.e., Arr[i]:

Arr[(i-1)/2]  |	 Returns the parent node
---------------------------------------------
Arr[(2*i)+1]  |	 Returns the left child node
---------------------------------------------
Arr[(2*i)+2]  |	 Returns the right child node

The traversal method used to achieve Array representation is Level Order:
                              10 (0)
                          /       \
                        15 (1)      30 (2)
                       /  \        /  \
                     40    50    100   40
                     (3)   (4)    (5)  (6)

-> [10, 15, 30, 40, 50, 100, 40]
In this array, array[k] <= array[2k+1] and array[k] <= array[2k+2], for k >= 0 (heap definition)